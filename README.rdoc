Rat Hole is a handy class for creating a rack compliant http proxy that allows you to modify the request from the user and the response from the server. 
The name is inspired by why's mousehole[http://code.whytheluckystiff.net/mouseHole/]

== Why
Use Rat Hole to proxy site A into the namespace of site B.

Along the way you can modify the request from the user (example: proxy to an ip and set the Host header to support virtual hosts without DNS).

You can also modify the response from the server to cleanup html tweak headers etc.

== Usage
  require 'rat_hole'
  require 'hpricot'

  class PoliticalAgendaRatHole < RatHole
    def process_user_request(rack_request)
      # optionally munge the request before passing it to the old server
      
      # required to return the rack request
      rack_request
    end

    def process_server_response(rack_response)
      # For any html pages proxied replace all links with http://ronpaul.com and 
      # add a Ron-Paul header.

      if(rack_response.content_type == 'text/html')

        # dump the body into hpricot so we can use hpricot's search/replace goodness
        doc = Hpricot(rack_response.body.first)

        # update all links to help spread our political views
        (doc/"a").set('href', 'http://ronpaul.com')

        # update the original string with our modified html
        rack_response.body.first.replace(doc.to_html)

        rack_response.headers['Ron-Paul'] = 'wish I could have voted for this guy'
      end

      # required to return the rack response
      rack_response
    end
  end

  app =  PoliticalAgendaRatHole.new('www.google.com')
  Rack::Handler::Mongrel.run(app, {:Host => 'localhost', :Port => 5001})

== How it Works
  User Request  --->
      ---  RatHoleProxy.process_user_request(rack_request) --->
                                                                <==========> OLD SERVER
      <---  RatHoleProxy.process_server_response(rack_response) ---
  User Response  <---

== TODO
* add error handling
* handle gziped content (accept-encoding, transfer-encoding)
* maybe use a pool of Net::HTTP connections to speed things up
* provide an easy way for testing rat holes

== Credits
* Michael Hale (http://halethegeek.com)
* David Bogus

== LICENSE
The MIT License

Copyright (c) 2008 Michael Hale & David Bogus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
